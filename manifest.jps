jpsType: install
jpsVersion: '1.5.2'
id: magento-cluster
homepage: https://github.com/jelastic-jps/magento-cluster/tree/master
description:
  text: Auto-scalable and highly-available Magento eCommerce cluster with out-of-box
    auto-scaling, even load and traffic distribution, Galera cluster,
    page caching and user session storage on certified Jelastic dockerized stack templates.
  short: Auto-scalable and highly-available Magento cluster with load balancing, data
    replication, content caching and user session storage.
categories:
- apps/clusters
- apps/e-commerce
name: Auto-Scalable Magento Cluster
logo: https://raw.githubusercontent.com/jelastic-jps/magento/master/magento21-php7-varnish-memcache-storage/images/magento.png

baseUrl: https://raw.githubusercontent.com/sych74/magento-cluster/v2.0.0

onBeforeInit: /scripts/settings.js?_r=${fn.random}
onBeforeInstall: /scripts/beforeinstall.js?_r=${fn.random}
nodes: definedInOnBeforeInstall
skipNodeEmails: true

settings:
  fields:
    - caption: Scaling Strategy
      type: list
      name: loadGrowth
      default: slow
      required: true
      width: 225
      tooltip: | 
        Configure auto-scaling triggers, i.e. how fast the system responds to load spikes by adding or removing nodes.
        <p>Read more about <a href="https://docs.jelastic.com/automatic-horizontal-scaling">Automatic Horizontal Scaling</a></p>
      values:        
        - value: slow
          caption: Low Load
          tooltip: <h2>Low load scaling strategy</h2>add 1 new node when CPU > 70% <p>remove when CPU < 20%</p>
        - value: medium
          caption: Medium Load
          tooltip: <h3>Medium load scaling strategy</h3>add 1 new node when CPU > 50% <p>remove when CPU < 20%</p>
        - value: fast
          caption: High Load
          tooltip: <h3>High load scaling strategy</h3>add 2 new nodes when CPU > 30% <p>remove when CPU < 10%</p>
  
    - caption: Advanced Features
      type: displayfield
      name: displayfield
      markup:
 
    - caption: Install LiteSpeed High-Performance Web Server
      type: checkbox
      name: ls-addon
      value: true
      disabled: false
      tooltip: "If this option is disabled, the cluster will be installed using NGINX load balancer and application servers"
      showIf:
        true:
          - caption: Web Application Firewall
            type: checkbox
            name: waf
            value: true
            disabled: false
            tooltip: "Protect web sites with <a href='https://www.litespeedtech.com/support/wiki/doku.php/litespeed_wiki:waf'>LiteSpeed built-in WAF</a> based on Free ModSecurity Rules from Comodo"
        false:
          - caption: Web Application Firewall
            type: checkbox
            name: waf
            value: false
            disabled: true
            tooltip: "Protect web sites with <a href='https://www.litespeedtech.com/support/wiki/doku.php/litespeed_wiki:waf'>LiteSpeed built-in WAF</a> based on Free ModSecurity Rules from Comodo"
      
    - caption: Install MariaDB Galera Cluster
      type: checkbox
      name: galera
      value: true
      disabled: false
      tooltip: "<h3>Requirements for All Tables:</h3> * run on InnoDB storage engine <p>* have a primary key</p>Read more about <a href='https://mariadb.com/kb/en/library/mariadb-galera-cluster-known-limitations/'>limitations</a>"
      
    - caption: Install Let's Encrypt SSL with Auto-Renewal
      type: checkbox
      name: le-addon
      value: true
      disabled: false

    - caption: Install Lightning-Fast Premium CDN with 130+ PoPs
      type: checkbox
      name: cdn-addon
      value: true
      disabled: false

globals:
  DB_USER: jelastic-${fn.random}
  DB_PASS: ${fn.password(10)}
  DB_HOST: sqldb
  PROTOCOL: http
  MG_ADMIN_PASS: ${fn.password(10)}
  SUCCESS: success
  EMAIL: default
  STACK: nginx

onAfterRedeployContainer[cp]:
  - setupCP:
      nodeId: cp

onAfterRedeployContainer[bl]:
 - setupLB:
      nodeId: bl
      
onAfterClone: 
  - install: ${baseUrl}/scripts/setupDomain.jps?_r=${fn.random}
    envName: ${event.response.env.envName}
    settings:
      domain: ${globals.PROTOCOL}://${event.response.env.domain}

onAfterMigrate: 
  - install: ${baseUrl}/scripts/setupDomain.jps?_r=${fn.random}
    envName: ${event.response.env.envName}
    settings:
      domain: ${globals.PROTOCOL}://${event.response.env.domain}

onAfterScaleOut[nodeGroup:cp]:
  forEach(event.response.nodes):
    - log: App Servers Setup
    - setNodeDisplayName [${@i.id}]: AppServer
    - setupCP:
        nodeId: ${@i.id}
      
onAfterInstallAddon [nodeGroup:cp, id:cdn]:
  - install: ${baseUrl/scripts/setupCDN.jps
  
onAfterBindSSL: setupDomain

onInstall:
        
  - script: ${baseUrl}/scripts/idna.js
  - setGlobals:
      DOMAIN: ${response.domain}         
            
  - if (${settings.is_trigger:true}):
    - log: Auto Scaling Triggers
    - script: "${baseUrl}/scripts/addTriggers.js"
      nodeGroup: cp
      resourceType: CPU
      loadGrowth: ${settings.loadGrowth}
      cleanOldTriggers: true
      scaleDownLimit: ${nodes.cp.length}
    
  - log: Set Node Display Name
  - setNodeDisplayName [bl]: Load balancer
  - setNodeDisplayName [cp]: AppServer
  - setNodeDisplayName [storage]: Storage  

  - if (${settings.galera:false}):
    - log: DB Galera  Setup
    - install: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/scripts/galera.jps
      settings:
        db_user: "${globals.DB_USER}"
        db_pass: "${globals.DB_PASS}"
      nodeGroup: sqldb
  - if (!${settings.galera:false}):
    - log: Master-Master Replication Setup
    - install: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/scripts/ms-mm-configuration.jps
      settings:        
        path: https://raw.githubusercontent.com/jelastic-jps/mysql-cluster/master/
        scheme: master
        db_user: "${globals.DB_USER}"
        db_pass: "${globals.DB_PASS}"
      nodeGroup: sqldb

  - setupLB:
      nodeId: bl
      
  - setupCP:
      nodeId: cp

  - if (${settings.le-addon:false}):
      - setGlobals:
          PROTOCOL: https
          
  - install-magento

  - if (${settings.le-addon:false}): 
      - install-LE-addon
      - setupDomain

  - if (${settings.cdn-addon:false}): install-edgeport-CDN
  
  - if (${settings.ls-addon:false}):
      setGlobals:
        STACK: llsmp
          
actions:

  install-LE-addon:
    - install: https://github.com/jelastic-jps/lets-encrypt/blob/master/manifest.jps?_r=${fn.random}
      nodeGroup: cp
      skipEmail: true
      settings:
        customDomains: ${globals.DOMAIN}

  setup-LE-Domain:
    - cmd[cp]: source /opt/letsencrypt/settings && echo $domain
    - cmd[${nodes.cp.master.id}]: bash ~/bin/setupMG.sh --DOMAIN https://${response.out}

  install-edgeport-CDN:
    - install: https://raw.githubusercontent.com/edgeport/cdn/master/manifest.yml?_r=${fn.random}
      nodeGroup: cp
      skipEmail: true
      settings:
        note: ${settings.noteCDN:}
    - script: return jelastic.dev.scripting.Eval("c05ffa5b45628a2a0c95467ebca8a0b4", session, "cdn.info", {partnerCode:1})
    - setGlobals:
        CDN_URL: ${globals.PROTOCOL}://${env.envName}-${response.response.partnerCode}.cdn.edgeport.net/
        SUCCESS: success-cdn
        EMAIL: cdn
    - cmd[${nodes.cp.master.id}]: |-
        wget ${baseUrl}/scripts/checkCdnContent.txt?_r=${fn.random} -O ~/bin/checkCdnContent.txt &>> /var/log/run.log
        bash ~/bin/setupMG.sh --edgeportCDN true --CDN_URL ${globals.CDN_URL} &>> /var/log/run.log

  install-magento:
    - install: /scripts/installMG.jps
      settings:
        db_host: ${globals.DB_HOST}
        db_user: ${globals.DB_USER}
        db_pass: ${globals.DB_PASS}
        mg_admin_pass: ${globals.MG_ADMIN_PASS}
        mg_url: ${globals.PROTOCOL}://${globals.DOMAIN}/
        user_email: ${user.email}

  setupCP:
    - log: App Server Optimization
    - install: https://raw.githubusercontent.com/jelastic/templates/master/config.jps?_r=${fn.random}
      settings:
        targetGroup: cp
        targetNodes: ${this.nodeId}
        optimization: magento

  setupLB:
    - log: Load Balancer Optimization
    - install: https://raw.githubusercontent.com/jelastic/templates/master/config.jps?_r=${fn.random}
      settings:
        targetGroup: bl
        targetNodes: ${this.nodeId}
        optimization: magento
  
    - if ("${nodes.bl.master.nodeType}" == "varnish"):
      - forEach(nodes.cp):
          cmd[${this.nodeId}]:
            - jem balancer addCommonHost -h ${@i.intIP}
            - sudo service varnish reload &>> /var/log/run.log
   
    - if ("${nodes.bl.master.nodeType}" == "litespeedadc"):
      - cmd[bl]: |-
          wget ${baseUrl}/scripts/LSADC.sh?_r=${fn.random} -O ~/LSADC.sh &>> /var/log/run.log;
          bash ~/LSADC.sh &>> /var/log/run.log;

success:
  email: success/email/success-${globals.STACK}-${globals.EMAIL}.md?_r=${fn.random}
  text: success/text/${globals.SUCCESS}.md?_r=${fn.random}

startPage: ${globals.PROTOCOL}://${env.domain}/
